BootStrap: docker
From: nvidia/cuda:10.0-cudnn7-devel-ubuntu18.04

%help
    Julia 1.1 docker image with cuda & cudnn
    Julia Dockerfile: https://github.com/docker-library/julia/blob/master/1.1/stretch/Dockerfile

#---------------------------------------------------------------------
%labels
#---------------------------------------------------------------------
MAINTAINER Jongsu Kim

#---------------------------------------------------------------------
%environment
#---------------------------------------------------------------------
export PATH=/bin:/usr/bin:/usr/local/bin
export JULIA_PATH=/usr/local/julia
export JULIA_BINDIR=$JULIA_PATH/bin
export PATH=$JULIA_PATH/bin:$PATH
export CUDA_PATH=/usr/local/cuda
export PATH=$CUDA_PATH/bin:$PATH
export LD_LIBRARY_PATH=$CUDA_PATH/lib64:/usr/lib/x86_64-linux-gnu:/lib:/lib64

#---------------------------------------------------------------------
%post
#---------------------------------------------------------------------
export DEBIAN_FRONTEND=noninteractive
export JULIA_PATH=/usr/local/julia
export PATH=$JULIA_PATH/bin:$PATH
export JULIA_GPG=3673DF529D9049477F76B37566E3C7DC03D6E495
export JULIA_VERSION=1.1.1

# apt packages
# select mirror
apt-get update 
apt-get install -y --no-install-recommends python3-dev python3-pip python3-setuptools python3-wheel
pip3 install --upgrade pip 
python3 -m pip install --upgrade setuptools wheel
python3 -m pip install apt-mirror-updater
# disable mirror selector
# apt-mirror-updater --auto-change-mirror

# update and install packages
apt-get update 
apt-get install -y --no-install-recommends locales tzdata
apt-get install -y --no-install-recommends ca-certificates curl
apt-get install -y --no-install-recommends libhdf5-dev hdf5-tools
# for GR.jl
apt-get install -y --no-install-recommends libxt6 libxrender1 libxext6 libgl1-mesa-glx libqt5widgets5 xvfb
python3 -m pip install numpy scipy matplotlib 
python3 -m pip install xlrd

# jupyter
python3 -m pip install jupyter

# install node & IJavascript
apt-get install -y curl
curl -sL https://deb.nodesource.com/setup_10.x | bash -
apt-get install -y nodejs
npm install -g ijavascript
npm install -g requirejs
npm install -g plotly.js-dist d3
ijsinstall

set -eux; \
	savedAptMark="$(apt-mark showmanual)"; \
	if ! command -v gpg > /dev/null; then \
		apt-get update; \
		apt-get install -y --no-install-recommends \
			gnupg \
			dirmngr \
		; \
		rm -rf /var/lib/apt/lists/*; \
	fi; \
apt-get clean

# locales
locale-gen --purge en_US.UTF-8
#echo "LC_ALL=en_US.UTF-8" >> /etc/environment
#echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
#echo "LANG=en_US.UTF-8" > /etc/locale.conf
#locale-gen en_US.UTF-8
echo -e 'LANG="en_US.UTF-8"\nLANGUAGE="en_US:en"\n' > /etc/default/locale
dpkg-reconfigure locales

# TZ
export TZ="Asia/Seoul"
ln -snf /usr/share/zoneinfo/${TZ} /etc/localtime 
echo ${TZ} > /etc/timezone 
dpkg-reconfigure tzdata --frontend noninteractive tzdata

export HDF5_DIR=/usr/lib/x86_64-linux-gnu/hdf5/serial/

# install julia
# https://julialang.org/downloads/#julia-command-line-version
# https://julialang-s3.julialang.org/bin/checksums/julia-1.1.1.sha256
# this "case" statement is generated via "update.sh"
	dpkgArch="$(dpkg --print-architecture)"; \
	case "${dpkgArch##*-}" in \
# amd64
		amd64) tarArch='x86_64'; dirArch='x64'; sha256='f0a83a139a89a2ccf2316814e5ee1c0c809fca02cbaf4baf3c1fd8eb71594f06' ;; \
# arm64v8
        arm64) tarArch='aarch64'; dirArch='aarch64'; sha256='3d9ba9c2204ea920006b3a91ecd2803cac808b29250f2120000e29fc0384099a' ;; \
# i386
		i386) tarArch='i686'; dirArch='x86'; sha256='3e6941326522ac4bc34c5663c2c5752417e92677ff9befc56ba264eb283f37f1' ;; \
		*) echo >&2 "error: current architecture ($dpkgArch) does not have a corresponding Julia binary release"; exit 1 ;; \
	esac; \
	\
	folder="$(echo "$JULIA_VERSION" | cut -d. -f1-2)"; \
	curl -fL -o julia.tar.gz.asc "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz.asc"; \
	curl -fL -o julia.tar.gz     "https://julialang-s3.julialang.org/bin/linux/${dirArch}/${folder}/julia-${JULIA_VERSION}-linux-${tarArch}.tar.gz"; \
	\
	echo "${sha256} *julia.tar.gz" | sha256sum -c -; \
	\
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$JULIA_GPG"; \
	gpg --batch --verify julia.tar.gz.asc julia.tar.gz; \
	command -v gpgconf > /dev/null && gpgconf --kill all; \
	rm -rf "$GNUPGHOME" julia.tar.gz.asc; \
	\
	mkdir "$JULIA_PATH"; \
	tar -xzf julia.tar.gz -C "$JULIA_PATH" --strip-components 1; \
	rm julia.tar.gz; \
	\
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
# smoke test
	julia --version

# create some generic mount points
mkdir -p /mnt/data /mnt/input /mnt/output /mnt/ref /mnt/code /mnt/work
